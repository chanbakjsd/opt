// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: github.com/gunk/opt/openapiv2/all.proto

// Package openapiv2 provides the openapiv2 matching options for gunk.

package openapiv2

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SwaggerScheme int32

const (
	SwaggerScheme_SwaggerSchemeUNKNOWN SwaggerScheme = 0
	SwaggerScheme_HTTP                 SwaggerScheme = 1
	SwaggerScheme_HTTPS                SwaggerScheme = 2
	SwaggerScheme_WS                   SwaggerScheme = 3
	SwaggerScheme_WSS                  SwaggerScheme = 4
)

// Enum value maps for SwaggerScheme.
var (
	SwaggerScheme_name = map[int32]string{
		0: "SwaggerSchemeUNKNOWN",
		1: "HTTP",
		2: "HTTPS",
		3: "WS",
		4: "WSS",
	}
	SwaggerScheme_value = map[string]int32{
		"SwaggerSchemeUNKNOWN": 0,
		"HTTP":                 1,
		"HTTPS":                2,
		"WS":                   3,
		"WSS":                  4,
	}
)

func (x SwaggerScheme) Enum() *SwaggerScheme {
	p := new(SwaggerScheme)
	*p = x
	return p
}

func (x SwaggerScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwaggerScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[0].Descriptor()
}

func (SwaggerScheme) Type() protoreflect.EnumType {
	return &file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[0]
}

func (x SwaggerScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwaggerScheme.Descriptor instead.
func (SwaggerScheme) EnumDescriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{0}
}

// Type of the security scheme. Valid values are "basic",
// "apiKey" or "oauth2". Required
type Type int32

const (
	Type_TYPE_INVALID Type = 0
	Type_TYPE_BASIC   Type = 1
	Type_TYPE_API_KEY Type = 2
	Type_TYPE_OAUTH2  Type = 3
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_BASIC",
		2: "TYPE_API_KEY",
		3: "TYPE_OAUTH2",
	}
	Type_value = map[string]int32{
		"TYPE_INVALID": 0,
		"TYPE_BASIC":   1,
		"TYPE_API_KEY": 2,
		"TYPE_OAUTH2":  3,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{1}
}

// In is the location of the API key. Valid values are "query" or "header". Required.
type In int32

const (
	In_IN_INVALID In = 0
	In_IN_QUERY   In = 1
	In_IN_HEADER  In = 2
)

// Enum value maps for In.
var (
	In_name = map[int32]string{
		0: "IN_INVALID",
		1: "IN_QUERY",
		2: "IN_HEADER",
	}
	In_value = map[string]int32{
		"IN_INVALID": 0,
		"IN_QUERY":   1,
		"IN_HEADER":  2,
	}
)

func (x In) Enum() *In {
	p := new(In)
	*p = x
	return p
}

func (x In) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (In) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[2].Descriptor()
}

func (In) Type() protoreflect.EnumType {
	return &file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[2]
}

func (x In) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use In.Descriptor instead.
func (In) EnumDescriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{2}
}

// Flow used by the OAuth2 security scheme. Valid values are
// "implicit", "password", "application" or "accessCode". Required.
type Flow int32

const (
	Flow_FLOW_INVALID     Flow = 0
	Flow_FLOW_IMPLICIT    Flow = 1
	Flow_FLOW_PASSWORD    Flow = 2
	Flow_FLOW_APPLICATION Flow = 3
	Flow_FLOW_ACCESS_CODE Flow = 4
)

// Enum value maps for Flow.
var (
	Flow_name = map[int32]string{
		0: "FLOW_INVALID",
		1: "FLOW_IMPLICIT",
		2: "FLOW_PASSWORD",
		3: "FLOW_APPLICATION",
		4: "FLOW_ACCESS_CODE",
	}
	Flow_value = map[string]int32{
		"FLOW_INVALID":     0,
		"FLOW_IMPLICIT":    1,
		"FLOW_PASSWORD":    2,
		"FLOW_APPLICATION": 3,
		"FLOW_ACCESS_CODE": 4,
	}
)

func (x Flow) Enum() *Flow {
	p := new(Flow)
	*p = x
	return p
}

func (x Flow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flow) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[3].Descriptor()
}

func (Flow) Type() protoreflect.EnumType {
	return &file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[3]
}

func (x Flow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flow.Descriptor instead.
func (Flow) EnumDescriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{3}
}

type JSONSchemaSimpleTypes int32

const (
	JSONSchemaSimpleTypes_UNKNOWN JSONSchemaSimpleTypes = 0
	JSONSchemaSimpleTypes_ARRAY   JSONSchemaSimpleTypes = 1
	JSONSchemaSimpleTypes_BOOLEAN JSONSchemaSimpleTypes = 2
	JSONSchemaSimpleTypes_INTEGER JSONSchemaSimpleTypes = 3
	JSONSchemaSimpleTypes_NULL    JSONSchemaSimpleTypes = 4
	JSONSchemaSimpleTypes_NUMBER  JSONSchemaSimpleTypes = 5
	JSONSchemaSimpleTypes_OBJECT  JSONSchemaSimpleTypes = 6
	JSONSchemaSimpleTypes_STRING  JSONSchemaSimpleTypes = 7
)

// Enum value maps for JSONSchemaSimpleTypes.
var (
	JSONSchemaSimpleTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "ARRAY",
		2: "BOOLEAN",
		3: "INTEGER",
		4: "NULL",
		5: "NUMBER",
		6: "OBJECT",
		7: "STRING",
	}
	JSONSchemaSimpleTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"ARRAY":   1,
		"BOOLEAN": 2,
		"INTEGER": 3,
		"NULL":    4,
		"NUMBER":  5,
		"OBJECT":  6,
		"STRING":  7,
	}
)

func (x JSONSchemaSimpleTypes) Enum() *JSONSchemaSimpleTypes {
	p := new(JSONSchemaSimpleTypes)
	*p = x
	return p
}

func (x JSONSchemaSimpleTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JSONSchemaSimpleTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[4].Descriptor()
}

func (JSONSchemaSimpleTypes) Type() protoreflect.EnumType {
	return &file_github_com_gunk_opt_openapiv2_all_proto_enumTypes[4]
}

func (x JSONSchemaSimpleTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JSONSchemaSimpleTypes.Descriptor instead.
func (JSONSchemaSimpleTypes) EnumDescriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{4}
}

// Swagger is a representation of OpenAPI v2 specification's Swagger object.
type Swagger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swagger             string                 `protobuf:"bytes,1,opt,name=Swagger,json=swagger,proto3" json:"Swagger,omitempty"`
	Info                *Info                  `protobuf:"bytes,2,opt,name=Info,json=info,proto3" json:"Info,omitempty"`
	Host                string                 `protobuf:"bytes,3,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	BasePath            string                 `protobuf:"bytes,4,opt,name=BasePath,json=base_path,proto3" json:"BasePath,omitempty"`
	Schemes             []SwaggerScheme        `protobuf:"varint,5,rep,packed,name=Schemes,json=schemes,proto3,enum=openapiv2.SwaggerScheme" json:"Schemes,omitempty"`
	Consumes            []string               `protobuf:"bytes,6,rep,name=Consumes,json=consumes,proto3" json:"Consumes,omitempty"`
	Produces            []string               `protobuf:"bytes,7,rep,name=Produces,json=produces,proto3" json:"Produces,omitempty"`
	Responses           map[string]*Response   `protobuf:"bytes,10,rep,name=Responses,json=responses,proto3" json:"Responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityDefinitions *SecurityDefinitions   `protobuf:"bytes,11,opt,name=SecurityDefinitions,json=security_definitions,proto3" json:"SecurityDefinitions,omitempty"`
	Security            []*SecurityRequirement `protobuf:"bytes,12,rep,name=Security,json=security,proto3" json:"Security,omitempty"`
	ExternalDocs        *ExternalDocumentation `protobuf:"bytes,14,opt,name=ExternalDocs,json=external_docs,proto3" json:"ExternalDocs,omitempty"`
}

func (x *Swagger) Reset() {
	*x = Swagger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swagger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swagger) ProtoMessage() {}

func (x *Swagger) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swagger.ProtoReflect.Descriptor instead.
func (*Swagger) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{0}
}

func (x *Swagger) GetSwagger() string {
	if x != nil {
		return x.Swagger
	}
	return ""
}

func (x *Swagger) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Swagger) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Swagger) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *Swagger) GetSchemes() []SwaggerScheme {
	if x != nil {
		return x.Schemes
	}
	return nil
}

func (x *Swagger) GetConsumes() []string {
	if x != nil {
		return x.Consumes
	}
	return nil
}

func (x *Swagger) GetProduces() []string {
	if x != nil {
		return x.Produces
	}
	return nil
}

func (x *Swagger) GetResponses() map[string]*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *Swagger) GetSecurityDefinitions() *SecurityDefinitions {
	if x != nil {
		return x.SecurityDefinitions
	}
	return nil
}

func (x *Swagger) GetSecurity() []*SecurityRequirement {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Swagger) GetExternalDocs() *ExternalDocumentation {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

// SecurityDefinitions is a representation of OpenAPI v2 specification's
// Security Definitions object.
type SecurityDefinitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A single security scheme definition, mapping a "name" to the scheme it defines.
	Security map[string]*SecurityScheme `protobuf:"bytes,1,rep,name=Security,json=security,proto3" json:"Security,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SecurityDefinitions) Reset() {
	*x = SecurityDefinitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDefinitions) ProtoMessage() {}

func (x *SecurityDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDefinitions.ProtoReflect.Descriptor instead.
func (*SecurityDefinitions) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityDefinitions) GetSecurity() map[string]*SecurityScheme {
	if x != nil {
		return x.Security
	}
	return nil
}

// SecurityScheme is a representation of OpenAPI v2 specification's
// Security Scheme object.
type SecurityScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of the security scheme. Valid values are "basic",
	// "apiKey" or "oauth2".
	Type Type `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=openapiv2.Type" json:"Type,omitempty"`
	// A short description for security scheme.
	Description string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// Required. The name of the header or query parameter to be used.
	// Valid for apiKey.
	Name string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// Required. The location of the API key. Valid values are "query" or "header".
	// Valid for apiKey.
	In In `protobuf:"varint,4,opt,name=In,json=in,proto3,enum=openapiv2.In" json:"In,omitempty"`
	// Required. The flow used by the OAuth2 security scheme. Valid values are
	// "implicit", "password", "application" or "accessCode".
	// Valid for oauth2.
	Flow Flow `protobuf:"varint,5,opt,name=Flow,json=flow,proto3,enum=openapiv2.Flow" json:"Flow,omitempty"`
	// Required. The authorization URL to be used for this flow. This SHOULD be in
	// the form of a URL.
	// Valid for oauth2/implicit and oauth2/accessCode.
	AuthorizationURL string `protobuf:"bytes,6,opt,name=AuthorizationURL,json=authorization_url,proto3" json:"AuthorizationURL,omitempty"`
	// Required. The token URL to be used for this flow. This SHOULD be in the
	// form of a URL.
	//
	// Valid for oauth2/password, oauth2/application and oauth2/accessCode.
	TokenURL string `protobuf:"bytes,7,opt,name=TokenURL,json=token_url,proto3" json:"TokenURL,omitempty"`
	// Required. The available scopes for the OAuth2 security scheme.
	// Valid for oauth2.
	Scopes *Scopes `protobuf:"bytes,8,opt,name=Scopes,json=scopes,proto3" json:"Scopes,omitempty"`
}

func (x *SecurityScheme) Reset() {
	*x = SecurityScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityScheme) ProtoMessage() {}

func (x *SecurityScheme) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityScheme.ProtoReflect.Descriptor instead.
func (*SecurityScheme) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityScheme) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_INVALID
}

func (x *SecurityScheme) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityScheme) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityScheme) GetIn() In {
	if x != nil {
		return x.In
	}
	return In_IN_INVALID
}

func (x *SecurityScheme) GetFlow() Flow {
	if x != nil {
		return x.Flow
	}
	return Flow_FLOW_INVALID
}

func (x *SecurityScheme) GetAuthorizationURL() string {
	if x != nil {
		return x.AuthorizationURL
	}
	return ""
}

func (x *SecurityScheme) GetTokenURL() string {
	if x != nil {
		return x.TokenURL
	}
	return ""
}

func (x *SecurityScheme) GetScopes() *Scopes {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// Scopes is a representation of OpenAPI v2 specification's Scopes object.
type Scopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps between a name of a scope to a short description of it (as the value
	// of the property).
	Scope map[string]string `protobuf:"bytes,1,rep,name=Scope,json=scope,proto3" json:"Scope,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Scopes) Reset() {
	*x = Scopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scopes) ProtoMessage() {}

func (x *Scopes) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scopes.ProtoReflect.Descriptor instead.
func (*Scopes) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{3}
}

func (x *Scopes) GetScope() map[string]string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// Operation is the representation of OpenAPI V2 specification operation object
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags         []string               `protobuf:"bytes,1,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	Summary      string                 `protobuf:"bytes,2,opt,name=Summary,json=summary,proto3" json:"Summary,omitempty"`
	Description  string                 `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	ExternalDocs *ExternalDocumentation `protobuf:"bytes,4,opt,name=ExternalDocs,json=external_docs,proto3" json:"ExternalDocs,omitempty"`
	OperationID  string                 `protobuf:"bytes,5,opt,name=OperationID,json=operation_id,proto3" json:"OperationID,omitempty"`
	Consumes     []string               `protobuf:"bytes,6,rep,name=Consumes,json=consumes,proto3" json:"Consumes,omitempty"`
	Produces     []string               `protobuf:"bytes,7,rep,name=Produces,json=produces,proto3" json:"Produces,omitempty"`
	Responses    map[string]*Response   `protobuf:"bytes,9,rep,name=Responses,json=responses,proto3" json:"Responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Schemes      []string               `protobuf:"bytes,10,rep,name=Schemes,json=schemes,proto3" json:"Schemes,omitempty"`
	Deprecated   bool                   `protobuf:"varint,11,opt,name=Deprecated,json=deprecated,proto3" json:"Deprecated,omitempty"`
	Security     []*SecurityRequirement `protobuf:"bytes,12,rep,name=Security,json=security,proto3" json:"Security,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{4}
}

func (x *Operation) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Operation) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Operation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Operation) GetExternalDocs() *ExternalDocumentation {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

func (x *Operation) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *Operation) GetConsumes() []string {
	if x != nil {
		return x.Consumes
	}
	return nil
}

func (x *Operation) GetProduces() []string {
	if x != nil {
		return x.Produces
	}
	return nil
}

func (x *Operation) GetResponses() map[string]*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *Operation) GetSchemes() []string {
	if x != nil {
		return x.Schemes
	}
	return nil
}

func (x *Operation) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Operation) GetSecurity() []*SecurityRequirement {
	if x != nil {
		return x.Security
	}
	return nil
}

// ExternalDocumentation is a representation of OpenAPI v2 specification's
// ExternalDocumentation object.
type ExternalDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	URL         string `protobuf:"bytes,2,opt,name=URL,json=url,proto3" json:"URL,omitempty"`
}

func (x *ExternalDocumentation) Reset() {
	*x = ExternalDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDocumentation) ProtoMessage() {}

func (x *ExternalDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDocumentation.ProtoReflect.Descriptor instead.
func (*ExternalDocumentation) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{5}
}

func (x *ExternalDocumentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExternalDocumentation) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

// Response is a representation of OpenAPI v2 specification's Response object.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `Description` is a short description of the response.
	// GFM syntax can be used for rich text representation.
	Description string `protobuf:"bytes,1,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// `Schema` optionally defines the structure of the response.
	// If `Schema` is not provided, it means there is no content to the response.
	Schema *Schema `protobuf:"bytes,2,opt,name=Schema,json=schema,proto3" json:"Schema,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Response) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Info is a representation of OpenAPI v2 specification's Info object.
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string   `protobuf:"bytes,1,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Description    string   `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	TermsOfService string   `protobuf:"bytes,3,opt,name=TermsOfService,json=terms_of_service,proto3" json:"TermsOfService,omitempty"`
	Contact        *Contact `protobuf:"bytes,4,opt,name=Contact,json=contact,proto3" json:"Contact,omitempty"`
	License        *License `protobuf:"bytes,5,opt,name=License,json=license,proto3" json:"License,omitempty"`
	Version        string   `protobuf:"bytes,6,opt,name=Version,json=version,proto3" json:"Version,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{7}
}

func (x *Info) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Info) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Info) GetTermsOfService() string {
	if x != nil {
		return x.TermsOfService
	}
	return ""
}

func (x *Info) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Info) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *Info) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Contact is a representation of OpenAPI v2 specification's Contact object.
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	URL   string `protobuf:"bytes,2,opt,name=URL,json=url,proto3" json:"URL,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=Email,json=email,proto3" json:"Email,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{8}
}

func (x *Contact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contact) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// License is a representation of OpenAPI v2 specification's License object.
type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The license name used for the API.
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// A URL to the license used for the API.
	URL string `protobuf:"bytes,2,opt,name=URL,json=url,proto3" json:"URL,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{9}
}

func (x *License) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *License) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

// Schema is a representation of OpenAPI v2 specification's Schema object.
// The Schema Object allows the definition of input and output data types
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSONSchema    *JSONSchema            `protobuf:"bytes,1,opt,name=JSONSchema,json=json_schema,proto3" json:"JSONSchema,omitempty"`
	Discriminator string                 `protobuf:"bytes,2,opt,name=Discriminator,json=discriminator,proto3" json:"Discriminator,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,3,opt,name=ReadOnly,json=read_only,proto3" json:"ReadOnly,omitempty"`
	ExternalDocs  *ExternalDocumentation `protobuf:"bytes,5,opt,name=ExternalDocs,json=external_docs,proto3" json:"ExternalDocs,omitempty"`
	Example       *Any                   `protobuf:"bytes,6,opt,name=Example,json=example,proto3" json:"Example,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{10}
}

func (x *Schema) GetJSONSchema() *JSONSchema {
	if x != nil {
		return x.JSONSchema
	}
	return nil
}

func (x *Schema) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *Schema) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Schema) GetExternalDocs() *ExternalDocumentation {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

func (x *Schema) GetExample() *Any {
	if x != nil {
		return x.Example
	}
	return nil
}

// JSONSchema represents properties from JSON Schema taken, and as used, in
// the OpenAPI v2 spec.
type JSONSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field 1 is reserved for '$id', omitted from OpenAPI v2.
	// field 2 is reserved for '$schema', omitted from OpenAPI v2.
	// Ref is used to define an external reference to include in the message.
	// This could be a fully qualified proto message reference, and that type must be imported
	// into the protofile. If no message is identified, the Ref will be used verbatim in
	// the output.
	// For example:
	//  `ref: ".google.protobuf.Timestamp"`.
	Ref string `protobuf:"bytes,3,opt,name=Ref,json=ref,proto3" json:"Ref,omitempty"`
	// field 4 is reserved for '$comment', omitted from OpenAPI v2.
	Title       string `protobuf:"bytes,5,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Default     string `protobuf:"bytes,7,opt,name=Default,json=default,proto3" json:"Default,omitempty"`
	ReadOnly    bool   `protobuf:"varint,8,opt,name=ReadOnly,json=read_only,proto3" json:"ReadOnly,omitempty"`
	// field 9 is reserved for 'examples', which is omitted from OpenAPI v2 in favor of 'example' field.
	MultipleOf       float64 `protobuf:"fixed64,10,opt,name=MultipleOf,json=multiple_of,proto3" json:"MultipleOf,omitempty"`
	Maximum          float64 `protobuf:"fixed64,11,opt,name=Maximum,json=maximum,proto3" json:"Maximum,omitempty"`
	ExclusiveMaximum bool    `protobuf:"varint,12,opt,name=ExclusiveMaximum,json=exclusive_maximum,proto3" json:"ExclusiveMaximum,omitempty"`
	Minimum          float64 `protobuf:"fixed64,13,opt,name=Minimum,json=minimum,proto3" json:"Minimum,omitempty"`
	ExclusiveMinimum bool    `protobuf:"varint,14,opt,name=ExclusiveMinimum,json=exclusive_minimum,proto3" json:"ExclusiveMinimum,omitempty"`
	MaxLength        uint64  `protobuf:"varint,15,opt,name=MaxLength,json=max_length,proto3" json:"MaxLength,omitempty"`
	MinLength        uint64  `protobuf:"varint,16,opt,name=MinLength,json=min_length,proto3" json:"MinLength,omitempty"`
	Pattern          string  `protobuf:"bytes,17,opt,name=Pattern,json=pattern,proto3" json:"Pattern,omitempty"`
	// field 18 is reserved for 'additionalItems', omitted from OpenAPI v2.
	// field 19 is reserved for 'items', but in OpenAPI-specific way. TODO(ivucica): add 'items'?
	MaxItems    uint64 `protobuf:"varint,20,opt,name=MaxItems,json=max_items,proto3" json:"MaxItems,omitempty"`
	MinItems    uint64 `protobuf:"varint,21,opt,name=MinItems,json=min_items,proto3" json:"MinItems,omitempty"`
	UniqueItems bool   `protobuf:"varint,22,opt,name=UniqueItems,json=unique_items,proto3" json:"UniqueItems,omitempty"`
	// field 23 is reserved for 'contains', omitted from OpenAPI v2.
	MaxProperties uint64   `protobuf:"varint,24,opt,name=MaxProperties,json=max_properties,proto3" json:"MaxProperties,omitempty"`
	MinProperties uint64   `protobuf:"varint,25,opt,name=MinProperties,json=min_properties,proto3" json:"MinProperties,omitempty"`
	Required      []string `protobuf:"bytes,26,rep,name=Required,json=required,proto3" json:"Required,omitempty"`
	// field 27 is reserved for 'additionalProperties', but in OpenAPI-specific way. TODO(ivucica): add 'additionalProperties'?
	// field 28 is reserved for 'definitions', omitted from OpenAPI v2.
	// field 29 is reserved for 'properties', but in OpenAPI-specific way. TODO(ivucica): add 'additionalProperties'?
	// 30 to 33 are reserved, as the properties have been omitted from OpenAPI v2:
	// patternProperties, dependencies, propertyNames, const
	// Items in 'array' must be unique.
	Array []string                `protobuf:"bytes,34,rep,name=Array,json=array,proto3" json:"Array,omitempty"`
	Type  []JSONSchemaSimpleTypes `protobuf:"varint,35,rep,packed,name=Type,json=type,proto3,enum=openapiv2.JSONSchemaSimpleTypes" json:"Type,omitempty"`
}

func (x *JSONSchema) Reset() {
	*x = JSONSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONSchema) ProtoMessage() {}

func (x *JSONSchema) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONSchema.ProtoReflect.Descriptor instead.
func (*JSONSchema) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{11}
}

func (x *JSONSchema) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *JSONSchema) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *JSONSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JSONSchema) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *JSONSchema) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *JSONSchema) GetMultipleOf() float64 {
	if x != nil {
		return x.MultipleOf
	}
	return 0
}

func (x *JSONSchema) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *JSONSchema) GetExclusiveMaximum() bool {
	if x != nil {
		return x.ExclusiveMaximum
	}
	return false
}

func (x *JSONSchema) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *JSONSchema) GetExclusiveMinimum() bool {
	if x != nil {
		return x.ExclusiveMinimum
	}
	return false
}

func (x *JSONSchema) GetMaxLength() uint64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *JSONSchema) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *JSONSchema) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *JSONSchema) GetMaxItems() uint64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (x *JSONSchema) GetMinItems() uint64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *JSONSchema) GetUniqueItems() bool {
	if x != nil {
		return x.UniqueItems
	}
	return false
}

func (x *JSONSchema) GetMaxProperties() uint64 {
	if x != nil {
		return x.MaxProperties
	}
	return 0
}

func (x *JSONSchema) GetMinProperties() uint64 {
	if x != nil {
		return x.MinProperties
	}
	return 0
}

func (x *JSONSchema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *JSONSchema) GetArray() []string {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *JSONSchema) GetType() []JSONSchemaSimpleTypes {
	if x != nil {
		return x.Type
	}
	return nil
}

// Any contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeURL string `protobuf:"bytes,1,opt,name=TypeURL,json=type_url,proto3" json:"TypeURL,omitempty"`
	// Must be a valid serialized protocol buffer of the above specified type.
	Value []byte `protobuf:"bytes,2,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{12}
}

func (x *Any) GetTypeURL() string {
	if x != nil {
		return x.TypeURL
	}
	return ""
}

func (x *Any) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// SecurityRequirement_SecurityRequirementValue holds a list of scopes.
// If the security scheme is of type "oauth2", then the value is a list of
// scope names required for the execution. For other security scheme types,
// the array MUST be empty.
type SecurityRequirement_SecurityRequirementValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope []string `protobuf:"bytes,1,rep,name=Scope,json=scope,proto3" json:"Scope,omitempty"`
}

func (x *SecurityRequirement_SecurityRequirementValue) Reset() {
	*x = SecurityRequirement_SecurityRequirementValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRequirement_SecurityRequirementValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRequirement_SecurityRequirementValue) ProtoMessage() {}

func (x *SecurityRequirement_SecurityRequirementValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRequirement_SecurityRequirementValue.ProtoReflect.Descriptor instead.
func (*SecurityRequirement_SecurityRequirementValue) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{13}
}

func (x *SecurityRequirement_SecurityRequirementValue) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// SecurityRequirement is a representation of OpenAPI v2 specification's
// Security Requirement object.
type SecurityRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each name must correspond to a security scheme which is declared in
	// the Security Definitions. If the security scheme is of type "oauth2",
	// then the value is a list of scope names required for the execution.
	// For other security scheme types, the array MUST be empty.
	SecurityRequirement map[string]*SecurityRequirement_SecurityRequirementValue `protobuf:"bytes,1,rep,name=SecurityRequirement,json=security_requirement,proto3" json:"SecurityRequirement,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SecurityRequirement) Reset() {
	*x = SecurityRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRequirement) ProtoMessage() {}

func (x *SecurityRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRequirement.ProtoReflect.Descriptor instead.
func (*SecurityRequirement) Descriptor() ([]byte, []int) {
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP(), []int{14}
}

func (x *SecurityRequirement) GetSecurityRequirement() map[string]*SecurityRequirement_SecurityRequirementValue {
	if x != nil {
		return x.SecurityRequirement
	}
	return nil
}

var File_github_com_gunk_opt_openapiv2_all_proto protoreflect.FileDescriptor

var file_github_com_gunk_opt_openapiv2_all_proto_rawDesc = []byte{
	0x0a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x75, 0x6e,
	0x6b, 0x2f, 0x6f, 0x70, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x22, 0xcf, 0x05, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x3e, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e,
	0x53, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a,
	0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x08,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x1a, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8c, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x49, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x12,
	0x27, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7e, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x1a, 0x2c, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x89, 0x05, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x08,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x6b, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x77, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xae, 0x02, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x71, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4f, 0x0a,
	0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb8,
	0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x0a, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xab, 0x07, 0x0a, 0x0a, 0x4a, 0x53,
	0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x08,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4f, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x6f, 0x66, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x29, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x09, 0x4d,
	0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d,
	0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x0d, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x40, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x56, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x25,
	0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x58, 0x0a, 0x2c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8a, 0x02, 0x0a, 0x13, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x76, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x73, 0x0a, 0x18, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x67, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x14, 0x53, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x02, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0a, 0x0a, 0x02, 0x57, 0x53, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b,
	0x0a, 0x03, 0x57, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a,
	0x5f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a,
	0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x14, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0x41, 0x0a, 0x02, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x49, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09,
	0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x2a, 0x82, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x0c,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x18, 0x0a, 0x10, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x9b, 0x01, 0x0a, 0x15, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0f, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x42, 0x24, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
	0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_gunk_opt_openapiv2_all_proto_rawDescOnce sync.Once
	file_github_com_gunk_opt_openapiv2_all_proto_rawDescData = file_github_com_gunk_opt_openapiv2_all_proto_rawDesc
)

func file_github_com_gunk_opt_openapiv2_all_proto_rawDescGZIP() []byte {
	file_github_com_gunk_opt_openapiv2_all_proto_rawDescOnce.Do(func() {
		file_github_com_gunk_opt_openapiv2_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_gunk_opt_openapiv2_all_proto_rawDescData)
	})
	return file_github_com_gunk_opt_openapiv2_all_proto_rawDescData
}

var (
	file_github_com_gunk_opt_openapiv2_all_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
	file_github_com_gunk_opt_openapiv2_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 20)
	file_github_com_gunk_opt_openapiv2_all_proto_goTypes   = []interface{}{
		(SwaggerScheme)(0),            // 0: openapiv2.SwaggerScheme
		(Type)(0),                     // 1: openapiv2.Type
		(In)(0),                       // 2: openapiv2.In
		(Flow)(0),                     // 3: openapiv2.Flow
		(JSONSchemaSimpleTypes)(0),    // 4: openapiv2.JSONSchemaSimpleTypes
		(*Swagger)(nil),               // 5: openapiv2.Swagger
		(*SecurityDefinitions)(nil),   // 6: openapiv2.SecurityDefinitions
		(*SecurityScheme)(nil),        // 7: openapiv2.SecurityScheme
		(*Scopes)(nil),                // 8: openapiv2.Scopes
		(*Operation)(nil),             // 9: openapiv2.Operation
		(*ExternalDocumentation)(nil), // 10: openapiv2.ExternalDocumentation
		(*Response)(nil),              // 11: openapiv2.Response
		(*Info)(nil),                  // 12: openapiv2.Info
		(*Contact)(nil),               // 13: openapiv2.Contact
		(*License)(nil),               // 14: openapiv2.License
		(*Schema)(nil),                // 15: openapiv2.Schema
		(*JSONSchema)(nil),            // 16: openapiv2.JSONSchema
		(*Any)(nil),                   // 17: openapiv2.Any
		(*SecurityRequirement_SecurityRequirementValue)(nil), // 18: openapiv2.SecurityRequirement_SecurityRequirementValue
		(*SecurityRequirement)(nil),                          // 19: openapiv2.SecurityRequirement
		nil,                                                  // 20: openapiv2.Swagger.ResponsesEntry
		nil,                                                  // 21: openapiv2.SecurityDefinitions.SecurityEntry
		nil,                                                  // 22: openapiv2.Scopes.ScopeEntry
		nil,                                                  // 23: openapiv2.Operation.ResponsesEntry
		nil,                                                  // 24: openapiv2.SecurityRequirement.SecurityRequirementEntry
	}
)

var file_github_com_gunk_opt_openapiv2_all_proto_depIdxs = []int32{
	12, // 0: openapiv2.Swagger.Info:type_name -> openapiv2.Info
	0,  // 1: openapiv2.Swagger.Schemes:type_name -> openapiv2.SwaggerScheme
	20, // 2: openapiv2.Swagger.Responses:type_name -> openapiv2.Swagger.ResponsesEntry
	6,  // 3: openapiv2.Swagger.SecurityDefinitions:type_name -> openapiv2.SecurityDefinitions
	19, // 4: openapiv2.Swagger.Security:type_name -> openapiv2.SecurityRequirement
	10, // 5: openapiv2.Swagger.ExternalDocs:type_name -> openapiv2.ExternalDocumentation
	21, // 6: openapiv2.SecurityDefinitions.Security:type_name -> openapiv2.SecurityDefinitions.SecurityEntry
	1,  // 7: openapiv2.SecurityScheme.Type:type_name -> openapiv2.Type
	2,  // 8: openapiv2.SecurityScheme.In:type_name -> openapiv2.In
	3,  // 9: openapiv2.SecurityScheme.Flow:type_name -> openapiv2.Flow
	8,  // 10: openapiv2.SecurityScheme.Scopes:type_name -> openapiv2.Scopes
	22, // 11: openapiv2.Scopes.Scope:type_name -> openapiv2.Scopes.ScopeEntry
	10, // 12: openapiv2.Operation.ExternalDocs:type_name -> openapiv2.ExternalDocumentation
	23, // 13: openapiv2.Operation.Responses:type_name -> openapiv2.Operation.ResponsesEntry
	19, // 14: openapiv2.Operation.Security:type_name -> openapiv2.SecurityRequirement
	15, // 15: openapiv2.Response.Schema:type_name -> openapiv2.Schema
	13, // 16: openapiv2.Info.Contact:type_name -> openapiv2.Contact
	14, // 17: openapiv2.Info.License:type_name -> openapiv2.License
	16, // 18: openapiv2.Schema.JSONSchema:type_name -> openapiv2.JSONSchema
	10, // 19: openapiv2.Schema.ExternalDocs:type_name -> openapiv2.ExternalDocumentation
	17, // 20: openapiv2.Schema.Example:type_name -> openapiv2.Any
	4,  // 21: openapiv2.JSONSchema.Type:type_name -> openapiv2.JSONSchemaSimpleTypes
	24, // 22: openapiv2.SecurityRequirement.SecurityRequirement:type_name -> openapiv2.SecurityRequirement.SecurityRequirementEntry
	11, // 23: openapiv2.Swagger.ResponsesEntry.value:type_name -> openapiv2.Response
	7,  // 24: openapiv2.SecurityDefinitions.SecurityEntry.value:type_name -> openapiv2.SecurityScheme
	11, // 25: openapiv2.Operation.ResponsesEntry.value:type_name -> openapiv2.Response
	18, // 26: openapiv2.SecurityRequirement.SecurityRequirementEntry.value:type_name -> openapiv2.SecurityRequirement_SecurityRequirementValue
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_github_com_gunk_opt_openapiv2_all_proto_init() }
func file_github_com_gunk_opt_openapiv2_all_proto_init() {
	if File_github_com_gunk_opt_openapiv2_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swagger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDefinitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityRequirement_SecurityRequirementValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_gunk_opt_openapiv2_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_gunk_opt_openapiv2_all_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_gunk_opt_openapiv2_all_proto_goTypes,
		DependencyIndexes: file_github_com_gunk_opt_openapiv2_all_proto_depIdxs,
		EnumInfos:         file_github_com_gunk_opt_openapiv2_all_proto_enumTypes,
		MessageInfos:      file_github_com_gunk_opt_openapiv2_all_proto_msgTypes,
	}.Build()
	File_github_com_gunk_opt_openapiv2_all_proto = out.File
	file_github_com_gunk_opt_openapiv2_all_proto_rawDesc = nil
	file_github_com_gunk_opt_openapiv2_all_proto_goTypes = nil
	file_github_com_gunk_opt_openapiv2_all_proto_depIdxs = nil
}
