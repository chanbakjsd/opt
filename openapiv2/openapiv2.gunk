package openapiv2

// Scheme describes the schemes supported by the OpenAPI Swagger
// and Operation objects.
type Scheme int

const (
	SwaggerSchemeUNKNOWN Scheme = iota
	HTTP
	HTTPS
	WS
	WSS
)

// `Swagger` is a representation of OpenAPI v2 specification's Swagger object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#swaggerObject
//
// Example:
//
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
//    info: {
//      title: "Echo API";
//      version: "1.0";
//      description: ";
//      contact: {
//        name: "gRPC-Gateway project";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway";
//        email: "none@example.com";
//      };
//      license: {
//        name: "BSD 3-Clause License";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
//      };
//    };
//    schemes: HTTPS;
//    consumes: "application/json";
//    produces: "application/json";
//  };
//
type Swagger struct {
	// Specifies the OpenAPI Specification version being used. It can be
	// used by the OpenAPI UI and other clients to interpret the API listing. The
	// value MUST be "2.0".
	Swagger string `pb:"1" json:"swagger"`
	// Provides metadata about the API. The metadata can be used by the
	// clients if needed.
	Info Info `pb:"2" json:"info"`
	// The host (name or ip) serving the API. This MUST be the host only and does
	// not include the scheme nor sub-paths. It MAY include a port. If the host is
	// not included, the host serving the documentation is to be used (including
	// the port). The host does not support path templating.
	Host string `pb:"3" json:"host"`
	// The base path on which the API is served, which is relative to the host. If
	// it is not included, the API is served directly under the host. The value
	// MUST start with a leading slash (/). The basePath does not support path
	// templating.
	// Note that using `base_path` does not change the endpoint paths that are
	// generated in the resulting OpenAPI file. If you wish to use `base_path`
	// with relatively generated OpenAPI paths, the `base_path` prefix must be
	// manually removed from your `google.api.http` paths and your code changed to
	// serve the API from the `base_path`.
	BasePath string `pb:"4" json:"base_path"`
	// The transfer protocol of the API. Values MUST be from the list: "http",
	// "https", "ws", "wss". If the schemes is not included, the default scheme to
	// be used is the one used to access the OpenAPI definition itself.
	Schemes []Scheme `pb:"5" json:"schemes"`
	// A list of MIME types the APIs can consume. This is global to all APIs but
	// can be overridden on specific API calls. Value MUST be as described under
	// Mime Types.
	Consumes []string `pb:"6" json:"consumes"`
	// A list of MIME types the APIs can produce. This is global to all APIs but
	// can be overridden on specific API calls. Value MUST be as described under
	// Mime Types.
	Produces []string `pb:"7" json:"produces"`
	// An object to hold responses that can be used across operations. This
	// property does not define global responses for all operations.
	Responses map[string]Response `pb:"10" json:"responses"`
	// Security scheme definitions that can be used across the specification.
	SecurityDefinitions SecurityDefinitions `pb:"11" json:"security_definitions"`
	// A declaration of which security schemes are applied for the API as a whole.
	// The list of values describes alternative security schemes that can be used
	// (that is, there is a logical OR between the security requirements).
	// Individual operations can override this definition.
	Security []SecurityRequirement `pb:"12" json:"security"`
	// Additional external documentation.
	ExternalDocs ExternalDocumentation `pb:"14" json:"external_docs"`
}

// `Operation` is a representation of OpenAPI v2 specification's Operation object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#operationObject
//
// Example:
//
//  service EchoService {
//    rpc Echo(SimpleMessage) returns (SimpleMessage) {
//      option (google.api.http) = {
//        get: "/v1/example/echo/{id}"
//      };
//
//      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
//        summary: "Get a message.";
//        operation_id: "getMessage";
//        tags: "echo";
//        responses: {
//          key: "200"
//            value: {
//            description: "OK";
//          }
//        }
//      };
//    }
//  }
type Operation struct {
	// A list of tags for API documentation control. Tags can be used for logical
	// grouping of operations by resources or any other qualifier.
	Tags []string `pb:"1" json:"tags"`
	// A short summary of what the operation does. For maximum readability in the
	// swagger-ui, this field SHOULD be less than 120 characters.
	Summary string `pb:"2" json:"summary"`
	// A verbose explanation of the operation behavior. GFM syntax can be used for
	// rich text representation.
	Description string `pb:"3" json:"description"`
	// Additional external documentation for this operation.
	ExternalDocs ExternalDocumentation `pb:"4" json:"external_docs"`
	// Unique string used to identify the operation. The id MUST be unique among
	// all operations described in the API. Tools and libraries MAY use the
	// operationId to uniquely identify an operation, therefore, it is recommended
	// to follow common programming naming conventions.
	OperationID string `pb:"5" json:"operation_id"`
	// A list of MIME types the operation can consume. This overrides the consumes
	// definition at the OpenAPI Object. An empty value MAY be used to clear the
	// global definition. Value MUST be as described under Mime Types.
	Consumes []string `pb:"6" json:"consumes"`
	// A list of MIME types the operation can produce. This overrides the produces
	// definition at the OpenAPI Object. An empty value MAY be used to clear the
	// global definition. Value MUST be as described under Mime Types.
	Produces []string `pb:"7" json:"produces"`
	// The list of possible responses as they are returned from executing this
	// operation.
	Responses map[string]Response `pb:"9" json:"responses"`
	// The transfer protocol for the operation. Values MUST be from the list:
	// "http", "https", "ws", "wss". The value overrides the OpenAPI Object
	// schemes definition.
	Schemes []Scheme `pb:"10" json:"schemes"`
	// Declares this operation to be deprecated. Usage of the declared operation
	// should be refrained. Default value is false.
	Deprecated bool `pb:"11" json:"deprecated"`
	// A declaration of which security schemes are applied for this operation. The
	// list of values describes alternative security schemes that can be used
	// (that is, there is a logical OR between the security requirements). This
	// definition overrides any declared top-level security. To remove a top-level
	// security declaration, an empty array can be used.
	Security []SecurityRequirement `pb:"12" json:"security"`
}

// `Header` is a representation of OpenAPI v2 specification's Header object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#headerObject
//
type Header struct {
	// `Description` is a short description of the header.
	Description string `pb:"1" json:"description"`
	// The type of the object. The value MUST be one of "string", "number", "integer", or "boolean". The "array" type is not supported.
	Type string `pb:"2" json:"type"`
	// `Format` The extending format for the previously mentioned type.
	Format string `pb:"3" json:"format"`
	// `Default` Declares the value of the header that the server will use if none is provided.
	// See: https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2.
	// Unlike JSON Schema this value MUST conform to the defined type for the header.
	Default string `pb:"6" json:"default"`
	// 'Pattern' See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3.
	Pattern string `pb:"13" json:"pattern"`
}

// `Response` is a representation of OpenAPI v2 specification's Response object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#responseObject
//
type Response struct {
	// `Description` is a short description of the response.
	// GFM syntax can be used for rich text representation.
	Description string `pb:"1" json:"description"`
	// `Schema` optionally defines the structure of the response.
	// If `Schema` is not provided, it means there is no content to the response.
	Schema Schema `pb:"2" json:"schema"`
	// `Headers` A list of headers that are sent with the response.
	// `Header` name is expected to be a string in the canonical format of the MIME header key
	// See: https://golang.org/pkg/net/textproto/#CanonicalMIMEHeaderKey
	Headers map[string]Header `pb:"3" json:"headers"`
	// `Examples` gives per-mimetype response examples.
	// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#example-object
	Examples map[string]string `pb:"4" json:"examples"`
}

// `Info` is a representation of OpenAPI v2 specification's Info object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#infoObject
//
// Example:
//
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
//    info: {
//      title: "Echo API";
//      version: "1.0";
//      description: ";
//      contact: {
//        name: "gRPC-Gateway project";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway";
//        email: "none@example.com";
//      };
//      license: {
//        name: "BSD 3-Clause License";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
//      };
//    };
//    ...
//  };
//
type Info struct {
	// The title of the application.
	Title string `pb:"1" json:"title"`
	// A short description of the application. GFM syntax can be used for rich
	// text representation.
	Description string `pb:"2" json:"description"`
	// The Terms of Service for the API.
	TermsOfService string `pb:"3" json:"terms_of_service"`
	// The contact information for the exposed API.
	Contact Contact `pb:"4" json:"contact"`
	// The license information for the exposed API.
	License License `pb:"5" json:"license"`
	// Provides the version of the application API (not to be confused
	// with the specification version).
	Version string `pb:"6" json:"version"`
}

// `Contact` is a representation of OpenAPI v2 specification's Contact object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#contactObject
//
// Example:
//
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
//    info: {
//      ...
//      contact: {
//        name: "gRPC-Gateway project";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway";
//        email: "none@example.com";
//      };
//      ...
//    };
//    ...
//  };
//
type Contact struct {
	// The identifying name of the contact person/organization.
	Name string `pb:"1" json:"name"`
	// The URL pointing to the contact information. MUST be in the format of a
	// URL.
	URL string `pb:"2" json:"url"`
	// The email address of the contact person/organization. MUST be in the format
	// of an email address.
	Email string `pb:"3" json:"email"`
}

// `License` is a representation of OpenAPI v2 specification's License object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#licenseObject
//
// Example:
//
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
//    info: {
//      ...
//      license: {
//        name: "BSD 3-Clause License";
//        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
//      };
//      ...
//    };
//    ...
//  };
//
type License struct {
	// The license name used for the API.
	Name string `pb:"1" json:"name"`
	// A URL to the license used for the API. MUST be in the format of a URL.
	URL string `pb:"2" json:"url"`
}

// `ExternalDocumentation` is a representation of OpenAPI v2 specification's
// ExternalDocumentation object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#externalDocumentationObject
//
// Example:
//
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
//    ...
//    external_docs: {
//      description: "More about gRPC-Gateway";
//      url: "https://github.com/grpc-ecosystem/grpc-gateway";
//    }
//    ...
//  };
//
type ExternalDocumentation struct {
	// A short description of the target documentation. GFM syntax can be used for
	// rich text representation.
	Description string `pb:"1" json:"description"`
	// The URL for the target documentation. Value MUST be in the format
	// of a URL.
	URL string `pb:"2" json:"url"`
}

// `Schema` is a representation of OpenAPI v2 specification's Schema object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
//
type Schema struct {
	JSONSchema JSONSchema `pb:"1" json:"json_schema"`
	// Adds support for polymorphism. The discriminator is the schema property
	// name that is used to differentiate between other schema that inherit this
	// schema. The property name used MUST be defined at this schema and it MUST
	// be in the required property list. When used, the value MUST be the name of
	// this schema or any schema that inherits it.
	Discriminator string `pb:"2" json:"discriminator"`
	// Relevant only for Schema "properties" definitions. Declares the property as
	// "read only". This means that it MAY be sent as part of a response but MUST
	// NOT be sent as part of the request. Properties marked as readOnly being
	// true SHOULD NOT be in the required list of the defined schema. Default
	// value is false.
	ReadOnly bool `pb:"3" json:"read_only"`
	// Additional external documentation for this schema.
	ExternalDocs ExternalDocumentation `pb:"5" json:"external_docs"`
	// A free-form property to include an example of an instance for this schema in JSON.
	// This is copied verbatim to the output.
	Example string `pb:"6" json:"example"`
}

type JSONSchemaSimpleTypes int

const (
	JSONSchemaSimpleTypes_UNKNOWN JSONSchemaSimpleTypes = iota
	ARRAY
	BOOLEAN
	INTEGER
	NULL
	NUMBER
	OBJECT
	STRING
)

// `JSONSchema` represents properties from JSON Schema taken, and as used, in
// the OpenAPI v2 spec.
//
// This includes changes made by OpenAPI v2.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
//
// See also: https://cswr.github.io/JsonSchema/spec/basic_types/,
// https://github.com/json-schema-org/json-schema-spec/blob/master/schema.json
//
// Example:
//
//  message SimpleMessage {
//    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//      json_schema: {
//        title: "SimpleMessage"
//        description: "A simple message."
//        required: ["id"]
//      }
//    };
//
//    // Id represents the message identifier.
//    string id = 1; [
//        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//          {description: "The unique identifier of the simple message."
//        }];
//  }
//
type JSONSchema struct {
	// Ref is used to define an external reference to include in the message.
	// This could be a fully qualified proto message reference, and that type must
	// be imported into the protofile. If no message is identified, the Ref will
	// be used verbatim in the output.
	// For example:
	//  `ref: ".google.protobuf.Timestamp"`.
	Ref string `pb:"3" json:"ref"`
	// The title of the schema.
	Title string `pb:"5" json:"title"`
	// A short description of the schema.
	Description string `pb:"6" json:"description"`
	Default     string `pb:"7" json:"default"`
	ReadOnly    bool   `pb:"8" json:"read_only"`
	// A free-form property to include a JSON example of this field. This is copied
	// verbatim to the output swagger.json. Quotes must be escaped.
	// This property is the same for 2.0 and 3.0.0 https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/3.0.0.md#schemaObject  https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
	Example    string  `pb:"9" json:"example"`
	MultipleOf float64 `pb:"10" json:"multiple_of"`
	// Maximum represents an inclusive upper limit for a numeric instance. The
	// value of MUST be a number,
	Maximum          float64 `pb:"11" json:"maximum"`
	ExclusiveMaximum bool    `pb:"12" json:"exclusive_maximum"`
	// Minimum represents an inclusive lower limit for a numeric instance. The
	// value of MUST be a number,
	Minimum          float64  `pb:"13" json:"minimum"`
	ExclusiveMinimum bool     `pb:"14" json:"exclusive_minimum"`
	MaxLength        uint64   `pb:"15" json:"max_length"`
	MinLength        uint64   `pb:"16" json:"min_length"`
	Pattern          string   `pb:"17" json:"pattern"`
	MaxItems         uint64   `pb:"20" json:"max_items"`
	MinItems         uint64   `pb:"21" json:"min_items"`
	UniqueItems      bool     `pb:"22" json:"unique_items"`
	MaxProperties    uint64   `pb:"24" json:"max_properties"`
	MinProperties    uint64   `pb:"25" json:"min_properties"`
	Required         []string `pb:"26" json:"required"`
	// Items in 'array' must be unique.
	Array []string                `pb:"34" json:"array"`
	Type  []JSONSchemaSimpleTypes `pb:"35" json:"type"`
	// `Format`
	Format string `pb:"36" json:"format"`
	// Items in `enum` must be unique https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1
	Enum []string `pb:"46" json:"enum"`
}

// `Tag` is a representation of OpenAPI v2 specification's Tag object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#tagObject
//
type Tag struct {
	// A short description for the tag. GFM syntax can be used for rich text
	// representation.
	Description string `pb:"2" json:"description"`
	// Additional external documentation for this tag.
	ExternalDocs ExternalDocumentation `pb:"3" json:"external_docs"`
}

// `SecurityDefinitions` is a representation of OpenAPI v2 specification's
// Security Definitions object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
//
// A declaration of the security schemes available to be used in the
// specification. This does not enforce the security schemes on the operations
// and only serves to provide the relevant details for each scheme.
type SecurityDefinitions struct {
	// A single security scheme definition, mapping a "name" to the scheme it
	// defines.
	Security map[string]SecurityScheme `pb:"1" json:"security"`
}

// The type of the security scheme. Valid values are "basic",
// "apiKey" or "oauth2".
type Type int

const (
	TYPE_INVALID Type = iota
	TYPE_BASIC
	TYPE_API_KEY
	TYPE_OAUTH2
)

// The location of the API key. Valid values are "query" or "header".
type In int

const (
	IN_INVALID In = iota
	IN_QUERY
	IN_HEADER
)

// The flow used by the OAuth2 security scheme. Valid values are
// "implicit", "password", "application" or "accessCode".
type Flow int

const (
	FLOW_INVALID Flow = iota
	FLOW_IMPLICIT
	FLOW_PASSWORD
	FLOW_APPLICATION
	FLOW_ACCESS_CODE
)

// `SecurityScheme` is a representation of OpenAPI v2 specification's
// Security Scheme object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securitySchemeObject
//
// Allows the definition of a security scheme that can be used by the
// operations. Supported schemes are basic authentication, an API key (either as
// a header or as a query parameter) and OAuth2's common flows (implicit,
// password, application and access code).
type SecurityScheme struct {
	// The type of the security scheme. Valid values are "basic",
	// "apiKey" or "oauth2".
	Type Type `pb:"1" json:"type"`
	// A short description for security scheme.
	Description string `pb:"2" json:"description"`
	// The name of the header or query parameter to be used.
	// Valid for apiKey.
	Name string `pb:"3" json:"name"`
	// The location of the API key. Valid values are "query" or
	// "header".
	// Valid for apiKey.
	In In `pb:"4" json:"in"`
	// The flow used by the OAuth2 security scheme. Valid values are
	// "implicit", "password", "application" or "accessCode".
	// Valid for oauth2.
	Flow Flow `pb:"5" json:"flow"`
	// The authorization URL to be used for this flow. This SHOULD be in
	// the form of a URL.
	// Valid for oauth2/implicit and oauth2/accessCode.
	AuthorizationURL string `pb:"6" json:"authorization_url"`
	// The token URL to be used for this flow. This SHOULD be in the
	// form of a URL.
	// Valid for oauth2/password, oauth2/application and oauth2/accessCode.
	TokenURL string `pb:"7" json:"token_url"`
	// The available scopes for the OAuth2 security scheme.
	// Valid for oauth2.
	Scopes Scopes `pb:"8" json:"scopes"`
}

// If the security scheme is of type "oauth2", then the value is a list of
// scope names required for the execution. For other security scheme types,
// the array MUST be empty.
type SecurityRequirement_SecurityRequirementValue struct {
	Scope []string `pb:"1" json:"scope"`
}

// `SecurityRequirement` is a representation of OpenAPI v2 specification's
// Security Requirement object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityRequirementObject
//
// Lists the required security schemes to execute this operation. The object can
// have multiple security schemes declared in it which are all required (that
// is, there is a logical AND between the schemes).
//
// The name used for each property MUST correspond to a security scheme
// declared in the Security Definitions.
type SecurityRequirement struct {
	// Each name must correspond to a security scheme which is declared in
	// the Security Definitions. If the security scheme is of type "oauth2",
	// then the value is a list of scope names required for the execution.
	// For other security scheme types, the array MUST be empty.
	SecurityRequirement map[string]SecurityRequirement_SecurityRequirementValue `pb:"1" json:"security_requirement"`
}

// `Scopes` is a representation of OpenAPI v2 specification's Scopes object.
//
// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#scopesObject
//
// Lists the available scopes for an OAuth2 security scheme.
type Scopes struct {
	// Maps between a name of a scope to a short description of it (as the value
	// of the property).
	Scope map[string]string `pb:"1" json:"scope"`
}
